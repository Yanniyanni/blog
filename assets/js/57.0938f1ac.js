(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{459:function(v,_,t){"use strict";t.r(_);var i=t(48),e=Object(i.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("p",[v._v("设计模式有六大原则，分别是：")]),v._v(" "),t("ul",[t("li",[v._v("开闭原则（Open Close Principle）")]),v._v(" "),t("li",[v._v("里氏代换原则（Liskov Substitution Principle）")]),v._v(" "),t("li",[v._v("接口隔离原则（Interface Segregation Principle）")]),v._v(" "),t("li",[v._v("依赖倒转原则（Dependence Inversion Principle）")]),v._v(" "),t("li",[v._v("迪米特法则，又称最少知道原则（Demeter Principle）")]),v._v(" "),t("li",[v._v("合成复用原则（Composite Reuse Principle）")])]),v._v(" "),t("h2",{attrs:{id:"开闭原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则"}},[v._v("#")]),v._v(" 开闭原则")]),v._v(" "),t("p",[v._v("开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。")]),v._v(" "),t("h2",{attrs:{id:"里氏代换原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#里氏代换原则"}},[v._v("#")]),v._v(" 里氏代换原则")]),v._v(" "),t("p",[v._v("里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。")]),v._v(" "),t("h2",{attrs:{id:"依赖倒转原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖倒转原则"}},[v._v("#")]),v._v(" 依赖倒转原则")]),v._v(" "),t("p",[v._v("这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。")]),v._v(" "),t("h2",{attrs:{id:"接口隔离原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口隔离原则"}},[v._v("#")]),v._v(" 接口隔离原则")]),v._v(" "),t("p",[v._v("这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。")]),v._v(" "),t("h2",{attrs:{id:"迪米特法则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#迪米特法则"}},[v._v("#")]),v._v(" 迪米特法则")]),v._v(" "),t("p",[v._v("迪米特法则/最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。")]),v._v(" "),t("h2",{attrs:{id:"合成复用原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合成复用原则"}},[v._v("#")]),v._v(" 合成复用原则")]),v._v(" "),t("p",[v._v("合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。")]),v._v(" "),t("h2",{attrs:{id:"《unix-linux设计哲学》原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#《unix-linux设计哲学》原则"}},[v._v("#")]),v._v(" 《UNIX/LINUX设计哲学》原则")]),v._v(" "),t("p",[v._v("《UNIX/LINUX设计哲学》是一本书。它里面提到了设计的十大准则：")]),v._v(" "),t("ul",[t("li",[v._v("准则一：小即是美")]),v._v(" "),t("li",[v._v("准则二：让每个程序只做好一件事")]),v._v(" "),t("li",[v._v("准则三：快速建立原型")]),v._v(" "),t("li",[v._v("准则四：舍弃高效率而取可移植性（可以被硬件磨平）")]),v._v(" "),t("li",[v._v("准则五：采用纯文本来存储数据")]),v._v(" "),t("li",[v._v("准则六：充分利用软件的杠杆效应（软件复用）")]),v._v(" "),t("li",[v._v("准则七：使用shell脚本来提高杠杆效应和可移植性")]),v._v(" "),t("li",[v._v("准则八：避免强制性的用户界面")]),v._v(" "),t("li",[v._v("准则九：让每个程序都称为过滤器")])]),v._v(" "),t("p",[v._v("小准则")]),v._v(" "),t("ul",[t("li",[v._v("允许用户定制环境")]),v._v(" "),t("li",[v._v("尽量使操作系统内核小而轻量化")]),v._v(" "),t("li",[v._v("使用小写字母并尽量简短")]),v._v(" "),t("li",[v._v("沉默是金（对于错误的捕捉）")]),v._v(" "),t("li",[v._v("各部分之和大于整体")]),v._v(" "),t("li",[v._v("寻求90%的解决方案（满足大部分人的需求）")])])])}),[],!1,null,null,null);_.default=e.exports}}]);