(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{422:function(t,_,v){"use strict";v.r(_);var a=v(48),r=Object(a.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"快速排序-quick-sort"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#快速排序-quick-sort"}},[t._v("#")]),t._v(" 快速排序(Quick Sort)")]),t._v(" "),v("ol",[v("li",[t._v("选定基准值。")]),t._v(" "),v("li",[t._v("分割，小于基准值放在左边，大于基准值放在右边。")]),t._v(" "),v("li",[t._v("递归左右两个区间。")])]),t._v(" "),v("ul",[v("li",[t._v("基准值的选择决定了时间复杂度")]),t._v(" "),v("li",[t._v("基准值每次都是当前区间的中间值时，操作数最少，时间复杂度为 O(nlog_{2}{n})。")]),t._v(" "),v("li",[t._v("基准值每次都是当前区间的最小值或最大值时，操作数最多，时间复杂度为 O(n^2)。")])]),t._v(" "),v("h2",{attrs:{id:"快速选择-quick-sort"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#快速选择-quick-sort"}},[t._v("#")]),t._v(" 快速选择(Quick Sort)")]),t._v(" "),v("p",[t._v("快速选择算法是基于快速排序算法的一种拓展算法，它可以在不对数据整体进行排序的前提下，快速找到排名第 k 位的元素，而且时间复杂度还能优化到 O(n)。")]),t._v(" "),v("p",[t._v("快排优化")]),t._v(" "),v("ul",[v("li",[t._v("单边递归优化")]),t._v(" "),v("li",[t._v("基准值选取优化（三点取中法）")]),t._v(" "),v("li",[t._v("partition 操作优化")])]),t._v(" "),v("h2",{attrs:{id:"堆排序-heap-sort"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#堆排序-heap-sort"}},[t._v("#")]),t._v(" 堆排序(Heap Sort)")]),t._v(" "),v("p",[t._v("了解堆排序，需要了解 完全二叉树")]),t._v(" "),v("p",[t._v("堆的类别：")]),t._v(" "),v("p",[t._v("堆可以分为大顶堆和小顶堆")]),t._v(" "),v("ul",[v("li",[t._v("小顶堆：在一棵完全二叉树中，每个父节点的值都要小于其两个子节点的值")]),t._v(" "),v("li",[t._v("大顶堆：在一棵完全二叉树中，每个父节点的值要大于其两个子节点的值")])]),t._v(" "),v("p",[t._v("堆得存储结构：")]),t._v(" "),v("p",[t._v("堆的实际存储结构是数组，这个数组是一段从下标 1 开始的连续存储空间。")]),t._v(" "),v("p",[t._v("堆操作：")]),t._v(" "),v("ul",[v("li",[t._v("插入，将新元素放到整个堆结构的末尾，然后对新插入的元素执行向上调整的操作，一直调整到满足堆的结构性质为止")]),t._v(" "),v("li",[t._v("删除，将堆顶元素弹出以后，再将堆的尾部元素移动到堆顶，对其执行向下调整的操作，一直调整到满足堆的结构性质为止")])]),t._v(" "),v("p",[t._v("讲着堆，干嘛讲 ，优先队列（Priority Queue)")]),t._v(" "),v("p",[t._v("堆是实现优先队列的其中一种方式，优先队列每次出队的元素，都是队列中优先级最大的值。")]),t._v(" "),v("p",[t._v("堆是用来维护集合最值的高效数据结构")]),t._v(" "),v("h2",{attrs:{id:"冒泡排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序"}},[t._v("#")]),t._v(" 冒泡排序")]),t._v(" "),v("h2",{attrs:{id:"插入排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#插入排序"}},[t._v("#")]),t._v(" 插入排序")]),t._v(" "),v("h2",{attrs:{id:"归并排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#归并排序"}},[t._v("#")]),t._v(" 归并排序")]),t._v(" "),v("h2",{attrs:{id:"堆排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#堆排序"}},[t._v("#")]),t._v(" 堆排序")]),t._v(" "),v("h2",{attrs:{id:"计数排序、桶排序和基数排序-分布式排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#计数排序、桶排序和基数排序-分布式排序"}},[t._v("#")]),t._v(" 计数排序、桶排序和基数排序（分布式排序）")])])}),[],!1,null,null,null);_.default=r.exports}}]);