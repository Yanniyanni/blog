(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{455:function(t,v,_){"use strict";_.r(v);var a=_(48),r=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p",[t._v("GOF总结的设计模式共有 "),_("strong",[t._v("23 种")]),t._v("。又可以把这些模式分为三大类：")]),t._v(" "),_("ul",[_("li",[t._v("创建型模式（Creational Patterns）")]),t._v(" "),_("li",[t._v("结构型模式/组合型模式（Structural Patterns）")]),t._v(" "),_("li",[t._v("行为型模式（Behavioral Patterns）")])]),t._v(" "),_("h2",{attrs:{id:"从设计到模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#从设计到模式"}},[t._v("#")]),t._v(" 从设计到模式")]),t._v(" "),_("p",[t._v("设计和模式是分开的。")]),t._v(" "),_("ul",[_("li",[t._v("设计是指设计的原则")]),t._v(" "),_("li",[t._v("模式是根据原则和经验总结出来的范式")])]),t._v(" "),_("blockquote",[_("p",[t._v("就是说，设计原则是前提，理解了这些设计原则，再加上经验总结，才总结出来的模式。")])]),t._v(" "),_("h2",{attrs:{id:"创建型模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[t._v("#")]),t._v(" 创建型模式")]),t._v(" "),_("p",[t._v("创建型模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。")]),t._v(" "),_("p",[t._v("创建型模式包含有以下模式：")]),t._v(" "),_("ul",[_("li",[t._v("工厂模式（Factory Pattern)")]),t._v(" "),_("li",[t._v("抽象工厂模式（Abstract Factory Pattern)")]),t._v(" "),_("li",[t._v("建造者模式（Builder Pattern)")]),t._v(" "),_("li",[t._v("单例模式（Singleton Pattern)")]),t._v(" "),_("li",[t._v("原型模式（Prototype Pattern)")])]),t._v(" "),_("blockquote",[_("p",[t._v("在 js 中，可以将 工厂方法模式、抽象工厂模式、建造者模式 都归纳为 工厂模式。")])]),t._v(" "),_("h2",{attrs:{id:"结构型模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[t._v("#")]),t._v(" 结构型模式")]),t._v(" "),_("p",[t._v("结构型模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。")]),t._v(" "),_("ul",[_("li",[t._v("适配器模式（Adapter Pattern）")]),t._v(" "),_("li",[t._v("装饰器模式（Decorator Pattern）")]),t._v(" "),_("li",[t._v("代理模式（Proxy Pattern）")]),t._v(" "),_("li",[t._v("外观模式（Facade Pattern）")]),t._v(" "),_("li",[t._v("桥接模式（Bridge Pattern）")]),t._v(" "),_("li",[t._v("过滤器模式（Filter、Criteria Pattern）")]),t._v(" "),_("li",[t._v("组合模式（Composite Pattern）")]),t._v(" "),_("li",[t._v("享元模式（Flyweight Pattern）")])]),t._v(" "),_("h2",{attrs:{id:"行为型模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式"}},[t._v("#")]),t._v(" 行为型模式")]),t._v(" "),_("p",[t._v("行为型模式特别关注对象之间的通信。")]),t._v(" "),_("ul",[_("li",[t._v("策略模式（Strategy Pattern）")]),t._v(" "),_("li",[t._v("模板模式（Template Pattern）")]),t._v(" "),_("li",[t._v("迭代器模式（Iterator Pattern）")]),t._v(" "),_("li",[t._v("责任链模式（Chain of Responsibility Pattern）")]),t._v(" "),_("li",[t._v("命令模式（Command Pattern）")]),t._v(" "),_("li",[t._v("观察者模式（Observer Pattern）")]),t._v(" "),_("li",[t._v("解释器模式（Interpreter Pattern）")]),t._v(" "),_("li",[t._v("中介者模式（Mediator Pattern）")]),t._v(" "),_("li",[t._v("备忘录模式（Memento Pattern）")]),t._v(" "),_("li",[t._v("状态模式（State Pattern）")]),t._v(" "),_("li",[t._v("空对象模式（Null Object Pattern）")]),t._v(" "),_("li",[t._v("访问者模式（Visitor Pattern）")])]),t._v(" "),_("blockquote",[_("p",[t._v("js 中常用")])]),t._v(" "),_("p",[t._v("用一个图片来整体描述一下设计模式之间的关系：")]),t._v(" "),_("a",{attrs:{"data-fancybox":"",href:t.$withBase("/patterns-1.jpg")}},[_("img",{attrs:{src:t.$withBase("/patterns-1.jpg")}})])])}),[],!1,null,null,null);v.default=r.exports}}]);